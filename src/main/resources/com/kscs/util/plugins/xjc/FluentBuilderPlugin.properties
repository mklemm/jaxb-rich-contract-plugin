usage.fluentBuilderGenerateTools=Generate utility classes as source code. If you say "no" here, you will have to add the plugin JAR \
  to the runtime classpath of the generated class domain.
usage=Generates an inner fluent builder for JAXB classes. Optionally, copy constructor and partial clone functionality can be generated.
usage.narrow=Uses copy constructors for all child nodes in the object tree as long as they are available. This \
  will cause the new instance to be as narrow as possible to the declared types.\nAbstract types and types not generated \
  from this XSD-model will always be copied by their "clone()"-method.
usage.copyPartial=Generates an additional 'copyOf'-method  \
  that takes a PropertyTree instance to restrict the copy operation to selected nodes in the object tree.
usage.generateTools=Generate utility classes as static source code artifacts. If no, the plugin JAR must be in compile- and runtime classpath.
usage.selectorClassName=Name of the generated nested "Selector" builder class, used to build up a property tree for partial copy functionality. \
  This setting will only have an effect if the "deep-copy-plugin" isn't also active. If it is, the "copy" plugin's settings will take precedence.
usage.rootSelectorClassName=Name of the generated nested static "Select" entry point class to be used by client code for the "partial copy" feature. \
  This setting will only have an effect if the "deep-copy-plugin" isn't also active. If it is, the "copy" plugin's settings will take precedence.
usage.fluentClassName=Name of the generated nested builder class. Can be set to handle naming conflicts.
usage.builderClassName=Name of the generated nested builder class. Can be set to handle naming conflicts.
usage.wrapperClassName=Name of the generated nested builder class. Can be set to handle naming conflicts.
usage.modifierClassName=Name of the generated modifier class. Can be set to handle naming conflicts.
usage.fluentInterfaceName=Name of the generated nested builder class. Can be set to handle naming conflicts.
usage.builderInterfaceName=Name of the generated nested builder interface. Can be set to handle naming conflicts.
usage.wrapperInterfaceName=Name of the generated nested builder class. Can be set to handle naming conflicts.
usage.modifierInterfaceName=Name of the generated nested builder class. Can be set to handle naming conflicts.
usage.newBuilderMethodName=Name of the generated static method to instantiate a new fluent builder. Can be set to handle naming conflicts.
usage.newCopyBuilderMethodName=Name of the generated instance method to instantiate a new fluent builder intitialized with a copy of the current instance.
usage.builderFieldSuffix=Suffix to append to the field holding the builder, change to  prevent name clashes.
usage.copyToMethodName=Name of the generated "copyTo" method.
usage.copyAlways=If true, generate code of fluent-builder "withXXX" methods so that all objects passed to the builder are inherently deep-copied.
usage.buildMethodName=Name of the generated "build" method that concludes building and returns the product. Can be set here to handle naming conflicts.
usage.endMethodName=Name of the generated "end" method that concludes a nested builder and returns to the outer builder. Can be set here to handle naming conflicts.
usage.generateJavadocFromAnnotations=If true, append schema annotation text (./annotation/documentation) to class getters/setters and builder methods.
usage.getters=Generates a "getter" method for each property which returns the current value for simple properties without a builder or the current builder for buildable properties.\
  For a collection property it returns the current collection of builders.\
  For a choice property it returns the current builder as a "Buildable" interface.\
  For a choice collection property it returns the current collection of builders as "Buildable" interface.
error.builderClassExists=Class "{0}" already contains inner class "Builder". Skipping generation of fluent builder.
doc.motivation=There already is the widely used "fluent-api" plugin for XJC. That, however isn't a real builder pattern since there is no \
  distinction between initialization and state change in fluent-api.\n\n\
fluent-builder now creates a real "Builder" pattern, implemented as an inner class to the generated classes.
doc.limitations=* It generates a large amount of code.\n\
* Note: Shared builder instances are NOT thread-safe by themselves.

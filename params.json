{"name":"jaxb-rich-contract-plugin","tagline":"Implements some JAXB plugins to generate advanced contract scenarios from XSD","body":"jaxb-rich-contract-plugin\r\n==========================\r\n\r\nCurrent Version: 4.1.3\r\n\r\nThis module is a collection of several plugins for the JAXB2 (Java API for XML binding) \"XSD to Java Compiler\" (XJC).\r\nThese plugins are intended to add support for additional contracts to the classes generated by XJC.\r\nCurrently, there are 5 plugin classes:\r\n\r\n1. **[group-interface](#group-interface)**: When using `<attribute-group>` or `<group>` elements in an XSD, they are transformed as interface\r\n   definitions, and any complexTypes using the groups will be generated as classes implementing this interface.\r\n2. **[constrained-properties](#constrained-properties)**: Will generate a complexTypes element members as bound and/or constrained properties as per\r\n   the JavaBeans spec.\r\n3. **[clone](#clone)**: Will generate a simple deep \"clone\" method for the generated classes based on the heuristic that it only\r\n   makes sense to traverse further down in the cloned object tree for members of types that are actually cloenable themselves.\r\n4. **[copy](#copy)**: Similar to \"clone\", will generate a simple deep \"createCopy\" method. The java API contract for the `java.lang.Cloneable`\r\n\tinterface and the rules for overriding `Object.clone()` are defective by design. So the \"copy\" plugin uses its own\r\n\tAPI to realize the desired behavior.\r\n\tAlso can generate a \"partial createCopy\" method, that takes a `PropertyTree` object which represents an include/exclude\r\n\trule for nodes in the object tree to clone. Excluded nodes will not be cloned and left alone.\r\n\tOptionally, corresponding copy constructors can also be generated.\r\n4. **[immutable](#immutable)**: Will make generated classes immutable. Only makes sense together with \"fluent-builder\" plugin (see below),\r\n\tor any other builder or initialisation facility, like the well-known \"value-constructor\" plugin.\r\n5. **[fluent-builder](#fluent-builder)**: Generates a builder class for every class generated. Builders are implemented as inner classes,\r\n\tstatic methods are provided for a fluent builder pattern in the form `MyClass.builder().withPropertyA(...).withPropertyB(...).build()`.\r\n\tBuilders also contain \"copy...\" methods to initialize the builder from another instance. Partial copying is also supported in the same way as in **clone**.\r\n\tThis is particularly useful together with `-Ximmutable` (see above), but not usable together with `-Xconstrained-properties` (see below).\r\n6. **[meta](#meta)**: Generates a nested class representing a static metamodel of the generated classes. In the \"enhanced\" version, this contains\r\n\tinformation about the type and the XSD element from which the property was generated, in \"simple\" mode, there are only constants for the property names.\r\n\r\n\r\n\r\n### Usage\r\n#### General\r\njaxb-rich-contract-plugin is a plugin to the XJC \"XML to Java compiler\" shipped with the\r\nreference implementation of JAXB, included in all JDKs since 1.6.\r\nIt is targeted on version 2.2 of the JAXB API.\r\nIn order to make it work, you need to:\r\n\r\n* Add the jar file to the classpath of XJC\r\n\r\n* Add the JAXB 2.2 XJC API to the classpath of XJC, if your environment is running by default under JAXB 2.1 or lower.\r\n\r\n* Add the corresponding activating command-line option to XJC's invocation,\r\n  see below for details of each of the plugins\r\n\r\n* Each of the plugins, except \"-Ximmutable\", has one or more sub-options to fine-control its behavior.\r\n  These sub-option must be given after the corresponding main \"-X...\" activation option, to avoid naming conflicts.\r\n  Names of sub-options can be given dash-separated or in camelCase.\r\n\r\n* The \"immutable\" and \"constrained-properties\" plugins are mutually exclusive. An object cannot be both immutable\r\n  and send change notifications.\r\n\r\n#### From Maven\r\nThere is a maven repository for this project under:\r\n\r\nhttp://maven.klemm-scs.com/release\r\n\r\nAdd this repository to your pom.xml:\r\n\r\n\t<pluginRepositories>\r\n\t\t<pluginRepository>\r\n\t\t\t<releases>\r\n\t\t        <enabled>false</enabled>\r\n\t\t        <updatePolicy>always</updatePolicy>\r\n\t\t        <checksumPolicy>warn</checksumPolicy>\r\n\t\t    </releases>\r\n\t\t\t<id>jaxb2-plugins</id>\r\n\t\t\t<name>JAXB2 XJC Plugin Repository</name>\r\n\t\t\t<url>http://maven.klemm-scs.com/release</url>\r\n\t\t\t<layout>default</layout>\r\n\t\t</pluginRepository>\r\n\t</pluginRepositories>\r\n\t\r\n\r\n\r\nYou should add \"maven-jaxb2-plugin\" to your `<build>`\r\nconfiguration.\r\nThen add \"jaxb-rich-contract-plugin\" as an XJC plugin (\"plugin for plugin\") to the maven plugin declaration.\r\nThe following example shows all possible options reflecting their default values:\r\n````xml\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.jvnet.jaxb2.maven2</groupId>\r\n                <artifactId>maven-jaxb2-plugin</artifactId>\r\n                <version>0.11.0</version>\r\n                <executions>\r\n                    <execution>\r\n                        <id>xsd-generate-2.1</id>\r\n                        <phase>generate-sources</phase>\r\n                        <goals>\r\n                            <goal>generate</goal>\r\n                        </goals>\r\n                    </execution>\r\n                </executions>\r\n                <configuration>\r\n                    <schemaIncludes>\r\n                        <schemaInclude>**/*.xsd</schemaInclude>\r\n                    </schemaIncludes>\r\n                    <strict>true</strict>\r\n                    <verbose>true</verbose>\r\n                    <extension>true</extension>\r\n                    <removeOldOutput>true</removeOldOutput>\r\n                    <args>\r\n\t\t\t\t\t\t<arg>-Xclone</arg>\r\n\t\t\t\t\t\t\t<arg>-cloneThrows=n</arg>\r\n\t\t\t\t\t\t<arg>-Xconstrained-properties</arg>\r\n\t\t\t\t\t\t\t<arg>-constrained=y</arg>\r\n\t\t\t\t\t\t\t<arg>-bound=y</arg>\r\n\t\t\t\t\t\t\t<arg>-setterThrows=n</arg>\r\n\t\t\t\t\t\t\t<arg>-generateTools=y</arg>\r\n\t\t\t\t\t\t<arg>-Xfluent-builder</arg>\r\n\t\t\t\t\t\t\t<arg>-generateTools=y</arg>\r\n\t\t\t\t\t\t\t<arg>-narrow=n</arg>\r\n\t\t\t\t\t\t\t<arg>-copyPartial=y</arg>\r\n\t\t\t\t\t\t<arg>-Xcopy</arg>\r\n\t\t\t\t\t\t\t<arg>-partial=y</arg>\r\n\t\t\t\t\t\t\t<arg>-generateTools=y</arg>\r\n\t\t\t\t\t\t\t<arg>-constructor=y</arg>\r\n\t\t\t\t\t\t\t<arg>-narrow=n</arg>\r\n\t\t\t\t\t\t<arg>-Xgroup-contract</arg>\r\n\t\t\t\t\t\t\t<arg>-declareSetters=y</arg>\r\n\t\t\t\t\t\t\t<arg>-declareBuilderInterface=y</arg>\r\n\t\t\t\t\t\t\t<arg>-upstreamEpisodeFile=/META-INF/jaxb-interfaces.episode</arg>\r\n\t\t\t\t\t\t\t<arg>-downstreamEpisodeFile=/META-INF/jaxb-interfaces.episode</arg>\r\n\t\t\t\t\t\t<arg>-Xmeta</arg>\r\n\t\t\t\t\t\t\t<arg>-generateTools=y</arg>\r\n\t\t\t\t\t\t\t<arg>-extended=n</arg>\r\n\t\t\t\t\t\t\t<arg>-camelCase=n</arg>\r\n\t\t\t\t\t\t\t<arg>-metaClassName=PropInfo</arg>\r\n\t\t\t\t\t\t<arg>-Ximmutable</arg>\r\n                        <arg>...</arg>\r\n                    </args>\r\n                    <plugins>\r\n                        <plugin>\r\n                            <groupId>com.kscs.util</groupId>\r\n                            <artifactId>jaxb-rich-contract-plugin</artifactId>\r\n                            <version>1.5.1</version>\r\n                        </plugin>\r\n                    </plugins>\r\n                    <dependencies>\r\n                        <!-- Put this in if your default JAXB version is 2.1 or lower,\r\n                        or if &quot;tools.jar&quot; isn't in your classpath -->\r\n\t\t\t\t\t\t<dependency>\r\n\t\t\t\t\t\t\t<groupId>org.glassfish.jaxb</groupId>\r\n\t\t\t\t\t\t\t<artifactId>jaxb-runtime</artifactId>\r\n\t\t\t\t\t\t\t<version>2.2.11</version>\r\n\t\t\t\t\t\t</dependency>\r\n\t\t\t\t\t\t<dependency>\r\n\t\t\t\t\t\t\t<groupId>org.glassfish.jaxb</groupId>\r\n\t\t\t\t\t\t\t<artifactId>jaxb-core</artifactId>\r\n\t\t\t\t\t\t\t<version>2.2.11</version>\r\n\t\t\t\t\t\t</dependency>\r\n\t\t\t\t\t\t<dependency>\r\n\t\t\t\t\t\t\t<groupId>org.glassfish.jaxb</groupId>\r\n\t\t\t\t\t\t\t<artifactId>jaxb-xjc</artifactId>\r\n\t\t\t\t\t\t\t<version>2.2.11</version>\r\n\t\t\t\t\t\t</dependency>\r\n\t                </dependencies>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n```\r\nNote: the `<extension>` flag must be set to \"true\" in order to make XJC accept any extensions at all.\r\n\r\nNote: jaxb-rich-contract-plugin implements JAXB and XJC APIs version 2.2.7. You most likely will have\r\n\tto add the dependencies to these libraries to your classpath effective at XJC runtime. See the\r\n\t`dependencies` element above on how to do this.\r\n\r\n\r\n### Version History\r\n* **1.0.0**:\tInitial Version\r\n* **1.0.1**:\tAdded constrained-property plugin\r\n* **1.0.2**:\tAdded partial clone method generation\r\n* **1.0.3**:\tImprovements in partial clone\r\n* **1.0.4**:\tAdded fluent builder and immutable plugins\r\n* **1.0.5**:    Added chainable fluent builder support\r\n* **1.1.0**:    New: `-Ximmutable`, Copy constructor support,\r\n\t\t\t\tfluent-builder copy from instance support,\r\n\t\t\t\tgeneral fixes.\r\n\t\t\t\tRemoved option to generate fluent builders without\r\n\t\t\t\tchained builder support.\r\n* **1.1.1**:\tNew: Type-safe selector support for partial clone/copy logic.\r\n* **1.1.2**:\tBig fixes in selector logic\r\n* **1.1.3**:\tMinor bug fixes in fluent-builder\r\n* **1.1.4**:\tFixed an error in fluent-builder where an initialization method wasn't properly overridden in derived builder classes, leading to the wrong builder type being returned when using chained sub-builders.\r\n* **1.1.5**:    Fixed error in Release Build process\r\n* **1.1.6**:\tFixed bug in group-contract plugin: Property names customised via binding info were generated incorrectly in the interface definitions.\r\n* **1.2.0**:    Major changes to the logic of partial cloning. The partial clone `PropertyTree` pattern replaces the previous `PropertyPath`, which had pretty\r\n\t\t\t\tunclear semantics. The new `PropertyTree` builders now just create a property tree, and on invocation of the \"clone()\" or \"copyOf()\" methods or the\r\n\t\t\t\tcopy constructor, it is decided by an additional parameter whether the property tree should be considered an exclusion or an inclusion pattern.\r\n\t\t\t\tAdditionally, the group-interface plugin has been modified to create interfaces also for the fluent builders, if the fluent-builder plugin is activated.\r\n* **1.2.3**:\tAdded \"Copyable\" interface and \"createCopy\" method which does the same thing as the \"clone()\" method, but doesn't suffer from the defective-by-design java.lang.Cloneable contract. It is planned to als add a \"copyFrom\" method to copy the state of another object into an existing object.\r\n* **1.3.1**:    Made fluent-builder plugin work in an \"episode\" (modular generation and compilation) context by also integrating compiled classes on the XJC classpath in the search for base and property classes.\r\n* **1.3.6**:    Also made group-interface work in an \"episode\" context, and fixed bug where empty interfaces were created if no implementation class for them could be found in the current module.\r\n* **1.4.0**:    group-interface is using its own episode file to maintain relationships to definitions in upstream modules.\r\n\t\t\t\tCommand-line options for a specific plugin must now be given immediately after the plugin activation option (\"-X...\"). This way, name conflicts between plugin options are avoided.\r\n\t\t\t\tStatic source files are generated via the JCodeModel.addResourceFile API, so a bug where the source files ended up in the root of the project tree should be fixed now.\r\n\t\t\t\tgroup-interface and fluent-builder now are working together more reliably.\r\n* **1.5.0**:    Added new Plugin \"-Xmeta\" to generate an inner class containing static meta information about the properties of a class.\r\n\t\t\t\tInternally, a common base class for plugins was extracted to help in command-line parsing and command-line documentation.\r\n* **1.5.1**:    Major updates to documentation, improvements to `-Xmeta` to expose static information about XSD definitions of properties.\r\n\r\n\r\n## group-interface\r\n\r\n### Motivation\r\nOut of the box, the only polymorphism supported by classes generated from an XSD is the `<extension>` notion,\r\ntransformed directly into an inheritance relationship by XJC.\r\nHowever, pure inheritance relationships are often inflexible and do not always reflect the intention\r\nof generating a \"contract\" that implementing classes must follow.\r\n\r\nWith this plugin, it is possible for your application code to treat classes using one or more specific model or attribute groups in a common way. Objects can be initialised or used via the interface.\r\n\r\n### Function\r\nFor definition of contracts, two additional XSD constructs, the `<group>` and `<attributeGroup>`,\r\nare readily available in XSD, but they're currently ignored by standard XJC and simply treated as an inclusion of\r\nelements or attributes into a generated class definition.\r\nThe group-interface plugin changes that and generates an `interface` definition for each `group` or `attributeGroup`\r\nfound in your model, defines the attributes or elements declared in the groups as get and set methods on the interface,\r\nand makes each generated class using the group or attributeGroup implement this interface.\r\nNew in version 1.2: The group-interface plugin will generate interfaces for the generated fluent builder classes,\r\nif the fluent-builder plugin is also activated.\r\n\r\n### Usage\r\nSee below on how to add the jaxb-rich-contract-plugin to your plugin path when building your project with maven.\r\ngroup-interface is activated by adding the `-Xgroup-contract` command-line option to your XJC invocation.\r\nFor group-interface, there are currently no further command line options.\r\n\r\n### Bugs\r\n* Currently none known.\r\n\r\n\r\n\r\n## constrained-properties\r\n\r\n### Motivation\r\nMany GUI applications use data binding to connect the data model to the view components. The JavaBeans standard\r\ndefines a simple component model that also supports properties which send notifications whenever the are about to be changed,\r\nand there are even vetoable changes that allow a change listener to inhibit modification of a property.\r\nWhile the JAvaBeans standard is a bit dated, data binding and property change notification can come in handy in many situations,\r\neven for debugging or reverse-engineering existing code, because you can track any change made to the model instance.\r\n\r\n### Function\r\nconstrained-properties generates additional code in the property setter methods of the POJOs generated by XJC that\r\nallow `PropertyChangeListener`s and `VetoableChangeListener`s to be attached to any instance of a XJC-generated class.\r\n\r\nCurrently, **indexed properties** are NOT supported in the way specified by JavaBeans, but instead, if a property represents a collection,\r\na collection proxy class is generated that supports its own set of collection-specific change notifications, vetoable and other.\r\nThis decision has been made because by default XJC generates collection properties rather than indexed properties,\r\nand indexed properties as mandated by JavaBeans are generally considered \"out of style\".\r\n\r\n### Usage\r\nActivate the plugin by giving command-line option `-Xconstrained-properties` to XJC.\r\n\r\nOther options supported:\r\n\r\n#### `-setter-throws=`y/n\r\nGenerate the setter method with \"throws PropertyVetoException\" if constrained properties are\r\nused. If no, only a RuntimeException is thrown on a PropertyVeto event. Default: n\r\n\t\t\t\t\t\t\t\r\n#### `-constrained=`y/n\r\nGenerate constrained properties, where a listener can inhibit the property change. Default: y\r\n\r\n#### `-bound=`y/n\r\nGenerate bound properties. Default: y\r\n\r\n#### `-generate-tools=`y/n\r\nTo support Collection-specific change events and behavior, additional classes are required.\r\nIf you set this option to \"yes\", these auxiliary classes will be generated into the source\r\ncode along with the generated JAXB classes. If you set this to \"no\", you will have to include\r\nthe plugin artifact into the runtime classpath of your application.\r\n\r\n### Limitations\r\n* The JavaBeans standard is only loosely implemented in the generated classes.\r\n\r\n* Indexed Properties as defined in JavaBeans are not supported.\r\n\r\n* The CollectionChange behavior implemented by the classes is not yet documented\r\n  and non-standard.\r\n\r\n### Bugs\r\n* Currently none known.\r\n\r\n\r\n## copy\r\n\r\n### Motivation\r\nSometimes it is necessary to create a deep copy of an object. There are various approaches to this. The \"copy\" plugin\r\ndefines its own interface, contract, and definitions that are somewhat different from the standard java \"java.lang.Cloneable\"\r\ncontract. The entry point generated in the source code is called `createCopy`, there are optionally also copy constructors.\r\n\r\n### Function\r\nThe `copy` plugin generates a deep clone method for each of the generated classes, based on the following assumptions:\r\n* Instances of any other classes implementing the `com.kscs.util.jaxb.Copyable` interface are copyable by the same\r\n  semantics as \"this\".\r\n\r\n* Objects implementing `java.lang.Cloneable` and not throwing \"CloneNotSupportedException\" are also reliably cloneable\r\n  by their \"clone\" Method.\r\n\r\n* Objects not implementing `java.lang.Cloneable` or primitive types are assumed to be immutable,\r\n  their references are copied over, they are not cloned.\r\n\r\n* Optionally, generates a \"partial createCopy\" method that takes a `PropertyTree` instance which represents a\r\n  specification of the nodes in the object tree to copy. The PropertyTree is built up by an intuitive builder\r\n  pattern:\r\n\r\n`final PropertyTree excludeEmployees = PropertyTree.builder().with(\"company\").with(\"employees\").build();`\r\n\r\n* There is also a type-safe way to build a PropertyPath instance by using a generated classes' `Selector` sub structure. The following will generate the same selection as above:\r\n\r\n`final PropertyTree excludeEmployees = Business.Select.root().company().employees().build()`\r\n\r\n\r\n\r\nThen, you would partially clone an object tree like this:\r\n```java\r\n    final BusinessPartner businessPartnerCopy = businessPartner.createCopy(excludeEmployees, PropertyTreeUse.EXCLUDE);\r\n```\r\nWhich is the same as\r\n```java\r\n\tfinal BusinessPartner businessPartnerCopy = businessPartner.copyExcept(excludeEmployees);\r\n```\r\nThis way, the copy of the original `businessPartner` will have no employees attached to the contained `company`.\r\nIt is also possible to copy only a specific subset of the original object tree, excluding everything else. The\r\ninverse result of the above would be generated by:\r\n```java\r\n\tfinal BusinessPartner businessPartnerCopy = businessPartner.createCopy(excludeEmployees, PropertyTreeUse.INCLUDE);\r\n```\r\nor\r\n```java\r\n\tfinal BusinessPartner businessPartnerCopy = businessPartner.copyOnly(excludeEmployees);\r\n```\r\n\r\nwhich will result in a businessPartnerCopy where every property is set to null, except the company property,\r\nand in the attached company object, every property is null except \"employees\".\r\n\t\r\nThis works for single and multi-valued properties, where for multi-valued properties, the property tree applies to\r\nall elements of the list of values in the same way. As of yet, there is no way to make a tree apply only to specific indexes\r\nin generated lists.\r\n\r\n\r\n### Usage\r\nPlugin activation: `-Xcopy`.\r\nOptions:\r\n#### `-constructor=`y/n\r\nGenerates a copy constructor.\r\n\r\n#### `-narrow=`y/n\r\nIf copy constructors are created, they are generated in such a way that, in order to copy descendant objects,\r\nthey call the copy constructors of any descendant property types found in the tree. This will result in an object\r\ntree that contains only the \"narrowest\" possible representation. For properties declared with an\r\nabstract type, their `clone()`-Methods will be called instead, resulting in an exact runtime copy. Default: no.\r\n\r\n#### `-partial=`y/n\r\nCreate partial clone method and - if constructor generation is selected, a partial copy constructor. (see above)\r\n\r\n#### `-generateTools=`y/n\r\nGenerate prerequisite classes like e.g. `com.kscs.util.jaxb.Copyable` and `com.kscs.util.jaxb.PropertyPath` as source files into the generated source\r\npackages. If you say 'no' here, you will have to add the jaxb-rich-contract-plugin jar to your\r\ncompile- and runtime classpath.\r\n\r\n### Limitations\r\n* The `-narrow` option is a somewhat special use case and should be used carefully.\r\n\r\n\r\n## clone\r\n\r\n### Motivation\r\nAnother way to create a deep copy of an object tree. This adheres to the `java.lang.Cloneable` contract, but isn't\r\nas versatile as `-Xcopy`.\r\n\r\n### Function\r\nThe `clone` plugin generates a deep clone method for each of the generated classes, based on the following assumptions:\r\n* Instances of any other class generated from the same XSD model are cloneable by the same semantics as \"this\".\r\n\r\n* Objects implementing `java.lang.Cloneable` and not throwing \"CloneNotSupportedException\" are also reliably cloneable\r\n  by their \"clone\" Method.\r\n\r\n* Objects not implementing `java.lang.Cloneable` or primitive types are assumed to be immutable,\r\n  their references are copied over, they are not cloned.\r\n\r\n### Usage\r\nPlugin activation: `-Xclone`.\r\nOptions:\r\n\r\n#### `-cloneThrows=`y/n\r\nDeclare \"clone()\"-Method to throw \"CloneNotSupportedException\" any of the cloneable child\r\nobjects have a \"clone\" method that declares `CloneNotSupportedException` being thrown.\r\nThe JDK spec says objects should declare their \"clone\" method with \"throws CloneNotSuppoertedException\"\r\nin order to enable subclasses to inhibit cloning even if their superclass declares \"Cloneable\".\r\nIn pratice, however, this doesn't make much sense and is against object-oriented principles.\r\nAll classes implementing `Cloneable` should really be cloneable and NOT throw\r\na `CloneNotSupportedException`.\r\nOrdinary Exceptions during cloning are rethrown as `RuntimeExceptions`,\r\nif this is set to \"no\", this is also true for any exceptions thrown by descendant objects,\r\nno matter whether they are `CloneNotSupported`or anything else. If this is \"yes\", any possible\r\n`CloneNotSupportedException` will be declared in the throws clause. This option will not\r\naffect generated \"partial\" clone methods. Default: no.\r\n\r\n\r\n## immutable\r\n\r\n### Motivation\r\nContemporary programming styles include making objects immutable as much as possible, to minimise\r\nside effects and allow for functional programming patterns.\r\n\r\n### Function\r\nThis plugin simply makes all \"setXXX\" methods \"protected\", thus preventing API consumers to modify\r\nstate of instances of generated classes after they have been created. This only makes sense together with\r\nanother plugin that allows for initialization of the instances, like e.g. the included `fluent-builder` plugin.\r\nFor collection-valued properties, `-Ximmutable` wraps all collections in a `Collections.unmodifiableCollection`,\r\nso collections are also made immutable.\r\nBecause JAXB serialization has a number of constraints regarding the internals of JAXB serializable objects,\r\nit wasn't advisable to just remove the setter methods or replace the collections with unmodifiable collections.\r\nSo, a bit of additional code will be created that leaves the old \"mutable\" structure of the class intact as much\r\nas is needed for JAXB, but modifies the public interface so objects appear immutable to client code.\r\n\r\n### Usage\r\nPlugin activation: `-Ximmutable`\r\n\r\n### Limitations\r\n* Access level \"protected\" may not be strict enough to prevent state changes.\r\n* If you activate plugins like \"fluent-api\" or the like, these plugins may circumvent the protection provided by the `immutable` plugin.\r\n\r\n\r\n## fluent-builder\r\n\r\n### Motivation\r\nThere already is the widely used \"fluent-api\" plugin for XJC.\r\nThat, however isn't a real builder pattern since there is no strict programmatic distinction between initialization\r\nand state change in fluent-api.\r\n\r\nfluent-builder now creates a real \"Builder\" pattern, implemented as an inner class to the generated classes.\r\n\r\n### Function\r\nfluent-builder creates a static inner class for every generated class representing the builder, and a static\r\nmethod on the generated class to create a builder.\r\n\r\nIf the \"immutable\" plugin is also activated, publicly exposed collections will be immutable, too.\r\n\r\nExample use in code:\r\n```java\r\n\tMyElement newElement = MyElement.builder().withPropertyA(...).withPropertyB(...).addCollectionPropertyA(...).build();\r\n```\r\nIn addition, new instances can be created as copies of existing instances using the builder, with an optional modification by othe builder methods:\r\n```java\r\n\tMyElement newElement = MyElement.copyOf(oldElement).withPropertyA(...).withPropertyB(...).build();\r\n```\t\r\nThe \"partial\" copy introduced in the \"clone\" plugin will work here as well:\r\n```java\r\n\tPropertyTree selection = MyElement.Select.root().propertyA().propertyAB().build();\r\n\tMyElement newElement = MyElement.copyExcept(oldElement, selection).withPropertyA(...).withPropertyB(...).build();\r\n```\r\nOften, properties of generated classes represent containment or references to generated classes in the same model.\r\nThe fluent-builder plugin lets you initialise properties of such a type - if it isn't an abstract type - by using sub-builders (\"chained\" builders) in the following way, given that both A and B are types defined in the XSD model, and A has a property of type B, and B has three properties of type String, x,y, and z:\r\n```java\r\n\tA newA = A.builder().withB().withX(\"x\").withY(\"y\").withZ(\"z\").end().build();\r\n```\r\nOf course, this plugin is most useful if `immutable` is also activated.\r\n\r\n### Usage\r\nPlugin activation: `-Xfluent-builder`\r\n\r\nOptions:\r\n#### `-narrow=`y/n\r\nWhen creating a builder via `copyOf()`, the narrowest possible copy of the input object is instantiated.\r\nSee also the documentation on `-Xclone` for a discussion.\r\n\r\n#### `-copyPartial=`y/n\r\nIf set to true, generates a `copyOf()`-Method that takes an additional `PropertyPath` parameter to limit\r\nthe copying to a certain depth or certain nodes in the object tree.\r\n\r\n\r\n### Limitations\r\n\r\n* It generates a large amount of code.\r\n\r\n* Note: Shared builder instances are NOT thread-safe by themselves.\r\n\r\n\r\n## meta\r\n\r\n### Motivation\r\nSometimes, you need information about the properties of a class, or you wish to have a constant for the\r\nnames of properties.\r\nThe \"meta\" plugin creates an inner class (the name of which can be controlled by a command-line option),\r\nand adds a constant field for each property.\r\nIf the `-extended=y` command´ine option is specified, these constants will hold instances of the `PropertyInfo`\r\nclass, on which the name, type, multiplicity (collection or not) and default value (from XSD) are exposed.\r\nWithout `-extended`, the constants are simply string constants holding the property names.\r\n\r\n### Usage\r\nPlugin activation: `-Xmeta`\r\n\r\nOptions:\r\n#### `-extended=`y/n (n)\r\nIf \"y\", extended property information (see above) will be generated, if \"n\", only string constants are generated for each property.\r\nDefault: n\r\n\r\n#### `-camel-case=`y/n (n)\r\nIf \"y\", generates the constant fields with exactly the same name as the properties they are describing.\r\nIf \"n\" (the default), they will be generated according to the java naming convention for constants.\r\n\r\n#### `-meta-class-name=`<string> (\"PropInfo\")\r\nSpecifies the name of the generated nested meta info class. By default, this is \"PropInfo\", but\r\nbecause naming conflicts are likely, you can choose a different name here.\r\n\r\n#### `-generate-tools=`y/n (y)\r\nAs with some of the other plugins, the code generated with the `-extended` option set requires an\r\nadditional helper class at compile time. If you say \"y\" here (the default), this helper class is\r\ngenerated as part of the generated code, if also the `-extended` option is set to \"y\".\r\nIf you use `-extended` but say \"no\" here, you will have to add the plugin artifact to the compile (and run)-time\r\nclasspath of your generated code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
